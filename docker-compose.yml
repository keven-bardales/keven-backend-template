version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: keven-backend-postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: starter_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d starter_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - keven-network

  # Backend Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: keven-backend-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/starter_db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - keven-network
    profiles:
      - dev

  # Backend Application (Production)
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: keven-backend-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:password@postgres:5432/starter_db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - keven-network
    profiles:
      - prod

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: keven-backend-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - keven-network
    profiles:
      - with-redis

volumes:
  postgres_data:
  redis_data:
  node_modules:

networks:
  keven-network:
    driver: bridge