# Keven Backend Template - Production Environment
# Run with: npm run docker:prod

version: '3.9'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: keven-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-keven_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-keven_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      # Internal only - remove external port exposure for security
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Production database initialization script
      - ./database/init-prod.sql:/docker-entrypoint-initdb.d/01-init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-keven_user} -d ${POSTGRES_DB:-keven_production}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network
    # Production security settings
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backend Application (Production)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: keven-backend-prod
    env_file:
      - .env.production
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      # Production logs with proper permissions
      - ./logs:/app/logs
      # Optional: Upload directory if needed
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    # Production security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (Production Cache & Session Store)
  redis:
    image: redis:7-alpine
    container_name: keven-redis-prod
    ports:
      # Internal only, no external exposure
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      # Redis configuration for production
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    # Production Redis configuration
    command: redis-server /usr/local/etc/redis/redis.conf
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx Reverse Proxy (Optional - enabled with --profile nginx)
  nginx:
    image: nginx:alpine
    container_name: keven-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      # Let's Encrypt certificates (if using)
      - ./letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    profiles:
      - nginx
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring (Optional - enabled with --profile monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: keven-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: keven-production-network
    # Production network with custom subnet
    ipam:
      config:
        - subnet: 172.20.0.0/16